#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (c) 2012, 2014 Abhay Devasthale and Martin Raspaud

# Author(s):

#   Abhay Devasthale <abhay.devasthale@smhi.se>
#   Martin Raspaud <martin.raspaud@smhi.se>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""Read a gac file.

"""

import argparse
import logging
import os
import tarfile
from datetime import datetime

from pygac.l1c_factory import L1cFactory

logger = logging.getLogger("pygac")
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)


class MyFormatter(logging.Formatter):
    converter = datetime.fromtimestamp

    def formatTime(self, record, datefmt=None):
        ct = self.converter(record.created)
        if datefmt:
            s = ct.strftime(datefmt)
        else:
            t = ct.strftime("%Y-%m-%d %H:%M:%S")
            s = "%s.%03d" % (t, record.msecs)
        return s


formatter = MyFormatter('[ %(levelname)s %(name)s %(asctime)s] %(message)s')
ch.setFormatter(formatter)
logger.addHandler(ch)

def str2scanline(string):
    """Convert string to scanline.

    Make sure, the scanline is not negative.

    Args:
        string (str): String to be converted

    Returns:
        int: Scanline
    """
    integer = int(string)
    if integer < 0:
        raise argparse.ArgumentTypeError('Scanlines must be >= 0')
    return integer


def validate_args(args):
    if args.end_line > 0 and args.start_line > args.end_line:
        raise ValueError('Start Scanline > End Scanline')
    if args.config and not os.path.isfile(args.config):
        raise FileNotFoundError(
            'The provided config file "%s" does not exist!'
            % args.config)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Read, calibrate and navigate NOAA AVHRR GAC data')
    parser.add_argument('path', type=str, help='Path to GAC file(s) to be processed '
                        '(Can be a file, directory or tar-archive)')
    parser.add_argument('start_line', type=str2scanline,
                        help='First scanline to be processed (0-based)')
    parser.add_argument('end_line', type=str2scanline,
                        help='Last scanline to be processed (0-based, '
                             'set to 0 for the last available scanline)')
    parser.add_argument('-c', '--config', type=str,
                        help='pygac config file to be used')
    args = parser.parse_args()
    validate_args(args)
    if args.config:
        os.environ['PYGAC_CONFIG_FILE'] = args.config
    l1c_factory = L1cFactory()
    path = args.path
    start_line = args.start_line
    end_line = args.end_line
    if os.path.isfile(path): 
        if tarfile.is_tarfile(path):
            # archive
            logger.info('Open archive "%s"' % str(path))
            with tarfile.open('archive.tar') as a:
                for tarinfo in a:
                    filename = tarinfo.name
                    fileobj = a.extractfile(filename)
                    try:
                        l1c_factory(filename, start_line, 
                                    end_line, fileobj=fileobj)
                    except Exception as e:
                        logger.exception('Could not porcess "%s"' % str(filename))
        else:
            l1c_factory(filename, start_line, end_line)
    elif os.path.isdir(path):
        logger.info('Open directory "%s"' % str(path))
        for basename in os.listdir(path):
            filename = os.path.join(path, basename)
            l1c_factory(filename, start_line, end_line)
    else:
        raise FileNotFoundError(
            'The provided path "%s" does not exist!' % args.path)
